1. Using Records and Procedures to Retrieve Employee Details

Objective: Learn how to use PL/SQL records inside a stored procedure to fetch data dynamically.

Exercise:
Create a procedure GET_EMPLOYEE_DETAILS that accepts an employee_id as input.
Inside the procedure, declare a record (using %ROWTYPE) to store the employee's details.
Fetch the first name, last name, and salary of the given employee_id into the record.
Print these details using DBMS_OUTPUT.PUT_LINE().

Hint:
Use SELECT INTO to fetch the data into the record.


2. Using Loops and Dynamic Data Processing

Objective: Practice loops by iterating through employees and calculating a bonus.

Exercise:
Declare a cursor to fetch employees who earn more than 3000.
Use a cursor FOR loop to iterate through each employee.
For each employee:
If the salary is between 3000 and 5000, increase it by 5%.
If the salary is above 5000, increase it by 3%.
Print the employee's name, old salary, and new salary.

Hint:
Use a CASE statement inside the loop for conditional salary adjustments.


3. Using Collections to Store and Process Employee Names

Objective: Learn how to use collections (TABLE or VARRAY) to store and manipulate employee names.

Exercise:
Declare a nested table to store VARCHAR2(50) names of employees.
Fetch all employees with salary above 4000 and insert their names into this collection.
Print all employee names using a loop.

Hint:
Use BULK COLLECT to fetch data efficiently into the collection.


4. Conditional Logic and Exception Handling in PL/SQL

Objective: Practice IF-ELSE conditions and exception handling.

Exercise:
Write a PL/SQL block that takes an employee ID as input.
If the employee exists, print "Employee Found" along with their name and department.
If the employee does not exist, raise a custom exception with the message "Employee Not Found".
Handle the exception and print an appropriate message.

Hint:
Use SELECT COUNT(*) INTO before fetching details to check existence.


5. Using PL/SQL Tables for Department-wise Salary Analysis

Objective: Work with associative arrays (PL/SQL tables) to store and analyze department-wise salaries.

Exercise:
Declare an associative array (INDEX BY PLS_INTEGER) to store total salaries by department ID.
Fetch all employees and group their salaries by department ID inside this array.
Print the department-wise total salaries.

Hint:
Use IF department_id EXISTS IN associative_array before updating the values.