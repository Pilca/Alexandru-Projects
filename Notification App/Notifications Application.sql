  CREATE TABLE "NOTIFICATIONS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOTIFICATION_MESSAGE" VARCHAR2(4000), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"IS_READ" NUMBER(1,0) DEFAULT 0, 
	"TITLE" VARCHAR2(200), 
	"NOTIFICATION_TYPE" VARCHAR2(100), 
	"NOTIFICATION_TYPE_ID" NUMBER, 
	"NOTIFICATION_EMOJI" VARCHAR2(10), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

CREATE TABLE NOTIFICATION_TYPES (
    NOTIFICATION_TYPE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        NOTIFICATION_TYPE_NAME VARCHAR2(100) NOT NULL
);



CREATE VIEW notification_view AS
SELECT 
    n.id,
    n.title,
    n.created_at,
    n.notification_message,
    nt.emoji || ' ' || nt.notification_type_name AS notification_type,
    CASE 
        WHEN n.is_read = 0 THEN 'Unread'
        ELSE 'Read'
    END AS status,
    CASE 
        WHEN n.is_read = 0 THEN '<span aria-hidden="true" class="fa fa-envelope-pointer fa-2x"></span>'
        ELSE NULL
    END AS action
FROM 
    notifications n
JOIN 
    notification_types nt 
ON 
    n.notification_type_id = nt.NOTIFICATION_TYPE_ID;

    CREATE VIEW read_notifications_view AS
SELECT 
    n.id,
    nt.emoji || ' ' || n.title AS title_with_emoji,
    n.notification_message,
    n.created_at
FROM 
    notifications n
JOIN 
    notification_types nt 
ON 
    n.notification_type_id = nt.NOTIFICATION_TYPE_ID
WHERE 
    n.is_read = 1
ORDER BY 
    n.created_at DESC;

-- Insert sample notification types
INSERT INTO NOTIFICATION_TYPES (NOTIFICATION_TYPE_NAME) VALUES ('Informational');
INSERT INTO NOTIFICATION_TYPES (NOTIFICATION_TYPE_NAME) VALUES ('Promotional');
INSERT INTO NOTIFICATION_TYPES (NOTIFICATION_TYPE_NAME) VALUES ('Alert');
INSERT INTO NOTIFICATION_TYPES (NOTIFICATION_TYPE_NAME) VALUES ('Social');

COMMIT;
CREATE TABLE Notifications_JN
 (JN_OPERATION CHAR(3) NOT NULL
 ,JN_ORACLE_USER VARCHAR2(30) NOT NULL
 ,JN_DATETIME DATE NOT NULL
 ,JN_NOTES VARCHAR2(240)
 ,JN_APPLN VARCHAR2(35)
 ,JN_SESSION NUMBER(38)
 ,ID NUMBER NOT NULL
 ,NOTIFICATION_MESSAGE VARCHAR2 (4000)
 ,CREATED_AT TIMESTAMP
 ,IS_READ NUMBER
 ,TITLE VARCHAR2 (200)
 ,NOTIFICATION_TYPE VARCHAR2 (100)
 ,NOTIFICATION_EMOJI VARCHAR2 (10)
 );

CREATE OR REPLACE TRIGGER Notifications_JNtrg
  AFTER 
  INSERT OR 
  UPDATE OR 
  DELETE ON Notifications for each row 
 Declare 
  rec Notifications_JN%ROWTYPE; 
  blank Notifications_JN%ROWTYPE; 
  BEGIN 
    rec := blank; 
    IF INSERTING OR UPDATING THEN 
      rec.ID := :NEW.ID; 
      rec.NOTIFICATION_MESSAGE := :NEW.NOTIFICATION_MESSAGE; 
      rec.CREATED_AT := :NEW.CREATED_AT; 
      rec.IS_READ := :NEW.IS_READ; 
      rec.TITLE := :NEW.TITLE; 
      rec.NOTIFICATION_TYPE := :NEW.NOTIFICATION_TYPE; 
      rec.NOTIFICATION_EMOJI := :NEW.NOTIFICATION_EMOJI;  
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      IF INSERTING THEN 
        rec.JN_OPERATION := 'INS'; 
      ELSIF UPDATING THEN 
        rec.JN_OPERATION := 'UPD'; 
      END IF; 
    ELSIF DELETING THEN 
      rec.ID := :OLD.ID; 
      rec.NOTIFICATION_MESSAGE := :OLD.NOTIFICATION_MESSAGE; 
      rec.CREATED_AT := :OLD.CREATED_AT; 
      rec.IS_READ := :OLD.IS_READ; 
      rec.TITLE := :OLD.TITLE; 
      rec.NOTIFICATION_TYPE := :OLD.NOTIFICATION_TYPE; 
      rec.NOTIFICATION_EMOJI := :OLD.NOTIFICATION_EMOJI; 
      rec.JN_DATETIME := SYSDATE; 
      rec.JN_ORACLE_USER := SYS_CONTEXT ('USERENV', 'SESSION_USER'); 
      rec.JN_APPLN := SYS_CONTEXT ('USERENV', 'MODULE'); 
      rec.JN_SESSION := SYS_CONTEXT ('USERENV', 'SESSIONID'); 
      rec.JN_OPERATION := 'DEL'; 
    END IF; 
    INSERT into Notifications_JN VALUES rec; 
  END;

  CREATE OR REPLACE PACKAGE notification_pkg AS
    PROCEDURE insert_notification(
        p_title IN VARCHAR2,
        p_message IN VARCHAR2,
        p_notification_type IN NUMBER
    );
    PROCEDURE get_unread_count(p_unread_count OUT NUMBER);
    PROCEDURE mark_as_read(p_notification_id IN NUMBER);
END notification_pkg;
/

CREATE OR REPLACE PACKAGE BODY notification_pkg AS

    -- Procedure to insert a new notification
    PROCEDURE insert_notification(
        p_title IN VARCHAR2,
        p_message IN VARCHAR2,
        p_notification_type IN NUMBER
    ) IS
        v_emoji VARCHAR2(10);
    BEGIN
        -- Retrieve the emoji for the given notification type
        SELECT emoji 
        INTO v_emoji
        FROM notification_types
        WHERE NOTIFICATION_TYPE_ID = p_notification_type;

        -- Insert the notification into the notifications table
        INSERT INTO notifications (
            title, 
            notification_message, 
            notification_type_id, 
            notification_emoji
        ) VALUES (
            p_title, 
            p_message, 
            p_notification_type, 
            v_emoji
        );
    END insert_notification;

    -- Procedure to get the count of unread notifications
    PROCEDURE get_unread_count(p_unread_count OUT NUMBER) IS
    BEGIN
        SELECT COUNT(*)
        INTO p_unread_count
        FROM notifications
        WHERE is_read = 0;
    END get_unread_count;

    -- Procedure to mark a notification as read
    PROCEDURE mark_as_read(p_notification_id IN NUMBER) IS 
    BEGIN 
        UPDATE notifications
        SET is_read = 1
        WHERE id = p_notification_id;

        COMMIT; -- Commit to save the changes
    END mark_as_read;

END notification_pkg;
/



